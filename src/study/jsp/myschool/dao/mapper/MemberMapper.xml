<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="MemberMapper">

	<resultMap id="member" type="study.jsp.myschool.model.Member">

		<result property="id" column="id" />
		<result property="name" column="name" />
		<result property="userId" column="user_id" />
		<result property="userPw" column="user_pw" />
		<result property="email" column="email" />
		<result property="gender" column="gender" />
		<result property="birthdate" column="birthdate" />
		<result property="tel" column="tel" />
		<result property="postcode" column="postcode" />
		<result property="addr1" column="addr1" />
		<result property="addr2" column="addr2" />
		<result property="profileImg" column="profile_img" />
		<result property="regDate" column="reg_date" />
		<result property="editDate" column="edit_date" />

	</resultMap>

	<!-- 다중행 조회(목록조회)를 위한 기능 정의 <select id="메서드이름" resultMap="리턴될 Beans의 id"> -->
	<select id="selectMemberList"
		parameterType="study.jsp.myschool.model.Member" resultMap="member">
		<!-- 이 안에서 처리할 SQL문을 명시한다. -->
		SELECT
		id, name, user_id, user_pw, email,
		gender, birthdate, tel,
		postcode,
		addr1, addr2, profile_img, reg_date, edit_date
		FROM member

		<where>
			<if test="name != null and name != ''">
				name LIKE concat('%', #{name}, '%')
			</if>
		</where>
		ORDER BY id DESC
		LIMIT #{limitStart}, #{listCount}
	</select>

	<!-- 단일행 조회(상세보기)를 위한 기능 정의 대부분의 경우 WHERE절의 조건은 PK값을 활용한다. WHERE절에 사용할 값을 
		파라미터로 전달해야 한다. MyBatis는 두 개 이상의 파라미터를 전달받지 못하기 때문에, 파라미터가 필요하면 무조건 Beans객체로 
		설정. <select id="메서드이름" parameterType="파라미터의 데이터 타입" resultMap="리턴될 Beans의 
		id"> -->
	<select id="selectMemberItem"
		parameterType="study.jsp.myschool.model.Member" resultMap="member">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		SELECT
		id, name, user_id, user_pw, email,
		gender, birthdate, tel,
		postcode,
		addr1, addr2, profile_img, reg_date, edit_date
		FROM member
		WHERE id=#{id}
	</select>

	<!-- 데이터 저장을 위한 기능 정의 <insert id="메서드이름" parameterType="파라미터의 데이터 타입" useGeneratedKeys="자동증가 
		일련번호값 리턴 여부" keyProperty="자동증가 일련번호 컬럼명"> -->
	<insert id="insertMemberItem"
		parameterType="study.jsp.myschool.model.Member"
		useGeneratedKeys="true" keyProperty="id">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		INSERT INTO member (
		name, user_id, user_pw, email, gender, birthdate,
		tel, postcode, addr1, addr2, profile_img, reg_date, edit_date
		) VALUES
		(
		#{name}, #{userId}, #{userPw}, #{email}, #{gender}, #{birthdate},
		#{tel}, #{postcode}, #{addr1}, #{addr2}, #{profileImg}, #{regDate},
		#{editDate}
		)
	</insert>

	<!-- 데이터 삭제를 위한 기능 정의 <delete id="메서드이름" parameterType="파라미터의 데이터 타입"> -->
	<delete id="deleteMemberItem"
		parameterType="study.jsp.myschool.model.Member">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		DELETE FROM member WHERE id=#{id}
	</delete>

	<!-- 데이터 갱신을 위한 기능 정의 <update id="메서드이름" parameterType="파라미터의 데이터 타입"> -->
	<update id="updateMemberItem"
		parameterType="study.jsp.myschool.model.Member">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		UPDATE member SET
		name=#{name}, user_id=#{userId},
		user_pw=#{userPw},
		email=#{email}, gender=#{gender}, birthdate=#{birthdate},
		tel=#{tel},
		postcode=#{postcode}, addr1=#{addr1}, addr2=#{addr2},
		profile_img=#{profileImg}, reg_date=#{regDate}, edit_date=#{editDate}
		WHERE
		id=#{id}
	</update>

	<select id="selectMemberCount"
		parameterType="study.jsp.myschool.model.Member" resultType="int">
		SELECT count(id)
		FROM member
		<where>
			<if test="name != null and name != ''">
				name LIKE concat('%', #{name}, '%')
			</if>
		</where>
	</select>
</mapper>
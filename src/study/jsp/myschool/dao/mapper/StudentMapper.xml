<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 이 파일의 경로를 config.xml에 명시해야 한다. -->

<!-- 이 XML의 구조대로 구현될 클래스의 이름 -->
<mapper namespace="StudentMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="student"
		type="study.jsp.myschool.model.Student">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="studno" column="studno" />
		<result property="name" column="name" />
		<result property="userid" column="userid" />
		<result property="grade" column="grade" />
		<result property="idnum" column="idnum" />
		<result property="birthdate" column="birthdate" />
		<result property="tel" column="tel" />
		<result property="height" column="height" />
		<result property="weight" column="weight" />
		<result property="deptno" column="deptno" />
		<result property="profno" column="profno" />
	</resultMap>

	<!-- 학과 목록 조회하기 -->
<!-- 	<select id="selectStudentList"
		parameterType="study.jsp.myschool.model.Student" resultMap="student">
		SELECT studno, name, userid, grade, idnum, birthdate, tel, height,
		weight, deptno, profno FROM student
		<where>
			<if test="name != null and name != ''">
				name LIKE concat('%', #{name}, '%')
			</if>
		</where>
		ORDER BY studno DESC
		LIMIT #{limitStart}, #{listCount}
	</select> -->

	<!-- 학생+학과+교수 테이블을 조인하여 목록조회 -->
	<select id="selectStudentList"
		parameterType="study.jsp.myschool.model.Student" resultMap="student">
		SELECT studno, student.name, student.userid, grade, idnum, birthdate, tel, height,
		weight,
		professor.name as pname, department.dname as dname
		FROM student JOIN professor ON
		student.profno=professor.profno
		JOIN department ON
		student.deptno=department.deptno;
		<where>
			<if test="name != null and name != ''">
				name LIKE concat('%', #{name}, '%')
			</if>
		</where>
		ORDER BY studno DESC
		LIMIT #{limitStart}, #{listCount}
	</select>

	<!-- 데이터 수 얻기 -->
	<select id="selectStudentCount"
		parameterType="study.jsp.myschool.model.Student" resultType="int">
		SELECT count(studno) FROM student
		<where>
			<if test="name != null and name != ''">
				name LIKE concat('%', #{name}, '%')
			</if>
		</where>
	</select>

	<select id="selectStudentItem"
		parameterType="study.jsp.myschool.model.Student" resultMap="student">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		SELECT studno, name, userid, grade, idnum, birthdate, tel, height,
		weight, deptno, profno
		FROM student
		WHERE studno=#{studno}
	</select>

	<insert id="insertStudentItem"
		parameterType="study.jsp.myschool.model.Student"
		useGeneratedKeys="true" keyProperty="studno">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		INSERT INTO student ( name, userid, grade, idnum, birthdate, tel,
		height, weight, deptno, profno ) VALUES ( #{name}, #{userid},
		#{grade}, #{idnum}, #{birthdate}, #{tel}, #{height}, #{weight},
		#{deptno}, #{profno})
	</insert>

	<delete id="deleteStudentItem"
		parameterType="study.jsp.myschool.model.Student">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		DELETE FROM student WHERE studno=#{studno}
	</delete>
	<update id="updateStudentItem"
		parameterType="study.jsp.myschool.model.Student">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		UPDATE student SET
		name=#{name}, userid=#{userid}, grade=#{grade},
		idnum=#{idnum}, birthdate=#{birthdate}, tel=#{tel}, height=#{height},
		weight=#{weight}, deptno=#{deptno}, profno=#{profno}
		WHERE
		studno=#{studno}
	</update>
</mapper>